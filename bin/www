#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('coffee:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/* Start cronjob to send feeds */
var FeedParser = require('feedparser');
var request = require('request');
var CronJob = require('cron').CronJob;
var pg = require('pg');
var secrets = require('../config/secrets');
var connectionString = secrets.db;
var nodemailer = require('nodemailer');
// Set up mailer to send mails
var transporter = nodemailer.createTransport({
    service: secrets.transporter.service,
    auth: {
        user: secrets.transporter.auth.user,
        pass: secrets.transporter.auth.pass
    }
});
new CronJob('00 00 * * * *', function() {
  var d = new Date();
  var hour_of_day = d.getUTCHours();       /* 0-23 */
  var day_of_week = d.getUTCDay();  /* Sunday=0, Monday=1, .. */
  console.log('Cron Job Started!');
  console.log(hour_of_day);
  console.log(day_of_week);

  var incrementSentCount = function(id){
    pg.connect(connectionString, function(err, client, done) {
      if (err) {
        return console.error('error fetching client from pool', err);
      }
      client.query("UPDATE coffee SET sent_count = sent_count + 1 WHERE id=$1", [id], function(err, result){
        if (err) {
          return console.error('error fetching client from pool', err);
        }
      });
    });
  };

  var sendFeeds = function(rows){
    console.log(rows);
    for (var i = 0; i < rows.length; i++) {
      var row = rows[i];
      console.log(row);
      var req = request(row['feed'])
       , feedparser = new FeedParser();

      req.on('error', function (error) {
        console.log('Invalid URL');
      });
      req.on('response', function (res) {
        var stream = this;
        if (res.statusCode != 200) return this.emit('error', new Error('Bad status code'));
        stream.pipe(feedparser);
      });
      feedparser.on('error', function(error) {
        console.log('Error parsing stream!');
      });
      var feedlist = []
      feedparser.on('readable', function() {
        var stream = this
          , meta = this.meta
          , item;
        while (item = stream.read()) {
          feedlist.push(item);
        }
      });
      feedparser.on('end', function(){
        item_num = feedlist.length-row['sent_count'];
        console.log(item_num);
        var feed = feedlist[item_num-1];
        console.log(feed);

        // Send feed over mail
        var mailOptions = {
          from: 'Peeyush Agarwal <coffeefeeder@gmail.com>',
          to: row['email'],
          subject: 'Your Feed : '+ feed['title'],
          text: 'Hi,\n'+feed['link']+feed['description']+'\n\nHappy Reading :)'
        };
        transporter.sendMail(mailOptions, function(error, info){
          if(error){
              console.log(error);
          }else{
              console.log('Message sent: ' + info.response);
              incrementSentCount(row['id']);
          }
        });
      });
      feedparser.on('error', function(){
        console.log('Error!');
      });
    }
  };

  pg.connect(connectionString, function(err, client, done) {
    if (err) {
      return console.error('error fetching client from pool', err);
    }
    if (day_of_week == 0) /* Sunday */
      var query = client.query("SELECT id, email, feed, sent_count FROM coffee WHERE hour_of_day=$1 AND sunday=TRUE AND verified=TRUE AND unsubscribe=FALSE",[hour_of_day]);
    else if (day_of_week == 1)
      var query = client.query("SELECT id, email, feed, sent_count FROM coffee WHERE hour_of_day=$1 AND monday=TRUE AND verified=TRUE AND unsubscribe=FALSE",[hour_of_day]);
    else if (day_of_week == 2)
      var query = client.query("SELECT id, email, feed, sent_count FROM coffee WHERE hour_of_day=$1 AND tuesday=TRUE AND verified=TRUE AND unsubscribe=FALSE",[hour_of_day]);
    else if (day_of_week == 3)
      var query = client.query("SELECT id, email, feed, sent_count FROM coffee WHERE hour_of_day=$1 AND wednesday=TRUE AND verified=TRUE AND unsubscribe=FALSE",[hour_of_day]);
    else if (day_of_week == 4)
      var query = client.query("SELECT id, email, feed, sent_count FROM coffee WHERE hour_of_day=$1 AND thursday=TRUE AND verified=TRUE AND unsubscribe=FALSE",[hour_of_day]);
    else if (day_of_week == 5)
      var query = client.query("SELECT id, email, feed, sent_count FROM coffee WHERE hour_of_day=$1 AND friday=TRUE AND verified=TRUE AND unsubscribe=FALSE",[hour_of_day]);
    else if (day_of_week == 6)
      var query = client.query("SELECT id, email, feed, sent_count FROM coffee WHERE hour_of_day=$1 AND saturday=TRUE AND verified=TRUE AND unsubscribe=FALSE",[hour_of_day]);
    var rows = [];
    query.on('row', function(row, res) {
      rows.push(row);
    });
    query.on('end', function() {
      client.end();
      sendFeeds(rows);
    });
  });
}, null, true, 'GMT');


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
